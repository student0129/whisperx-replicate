name: Push to Replicate
on:
  push:
    branches:
      - main
jobs:
  push_model:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        
      - name: Debug environment before installation
        run: |
          echo "=== System Information ==="
          echo "Runner OS: ${{ runner.os }}"
          echo "Runner Arch: ${{ runner.arch }}"
          uname -a
          lsb_release -a || echo "lsb_release not available"
          echo "Current PATH: $PATH"
          echo "Current directory: $(pwd)"
          echo "=== Repository files ==="
          ls -la
          
      - name: Get latest Cog version and download URL
        id: cog-info
        run: |
          # Fetch the latest release info from GitHub API
          echo "=== Fetching latest release info ==="
          curl -s https://api.github.com/repos/replicate/cog/releases/latest > latest_release.json
          
          # Show what we got
          echo "=== Release info ==="
          cat latest_release.json | jq -r '.tag_name, .name'
          
          # Extract version
          LATEST_VERSION=$(cat latest_release.json | jq -r '.tag_name' | sed 's/^v//')
          echo "Latest Cog version: $LATEST_VERSION"
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          
          # List all assets
          echo "=== Available assets ==="
          cat latest_release.json | jq -r '.assets[].name'
          
          # Find the correct asset URL for Linux x86_64
          DOWNLOAD_URL=$(cat latest_release.json | jq -r '.assets[] | select(.name | contains("Linux_x86_64")) | .browser_download_url')
          echo "Download URL: $DOWNLOAD_URL"
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
          
      - name: Install Cog manually with debugging
        run: |
          echo "=== Downloading Cog ==="
          DOWNLOAD_URL="${{ steps.cog-info.outputs.download_url }}"
          
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "ERROR: Could not find download URL"
            echo "=== Trying alternative download method ==="
            # Fallback to a known working version
            COG_VERSION="0.8.6"
            DOWNLOAD_URL="https://github.com/replicate/cog/releases/download/v${COG_VERSION}/cog_Linux_x86_64.tar.gz"
            echo "Using fallback version: $COG_VERSION"
            echo "Fallback URL: $DOWNLOAD_URL"
          fi
          
          # Download with follow redirects and show headers
          curl -L -H "Accept: application/octet-stream" -o cog.tar.gz "$DOWNLOAD_URL" -v
          
          echo "=== Verify download ==="
          ls -la cog.tar.gz
          file cog.tar.gz
          
          # Check if it's actually a tar.gz file
          if file cog.tar.gz | grep -q "gzip compressed"; then
            echo "File is a valid gzip archive"
          else
            echo "ERROR: Downloaded file is not a gzip archive"
            echo "File contents (first 100 chars):"
            head -c 100 cog.tar.gz
            echo ""
            exit 1
          fi
          
          echo "=== Extract Cog ==="
          tar -xzvf cog.tar.gz -C /tmp/
          ls -la /tmp/
          
          # Find and move the cog binary
          find /tmp -name "cog" -type f -executable | head -1 | xargs -I {} sudo mv {} /usr/local/bin/cog
          
          echo "=== Set permissions ==="
          sudo chmod +x /usr/local/bin/cog
          ls -la /usr/local/bin/cog
          
          echo "=== Verify installation ==="
          /usr/local/bin/cog --version
          
      - name: Alternative installation method (if previous fails)
        if: failure()
        run: |
          echo "=== Trying alternative installation via install script ==="
          sudo curl -o /usr/local/bin/cog -L "https://github.com/replicate/cog/releases/latest/download/cog_$(uname -s)_$(uname -m)"
          sudo chmod +x /usr/local/bin/cog
          cog --version || {
            echo "=== That failed too, trying pip install ==="
            pip install cog
            which cog
            cog --version
          }
          
      - name: Debug environment after installation
        run: |
          echo "=== Post-installation check ==="
          echo "PATH: $PATH"
          echo "Cog location: $(which cog || echo 'not found')"
          echo "Cog version: $(cog --version || echo 'version check failed')"
          echo "=== Docker check ==="
          docker --version
          docker info
          
      - name: Login to Replicate
        env:
          REPLICATE_API_TOKEN: ${{ secrets.REPLICATE_API_TOKEN }}
        run: |
          echo "=== Attempting login ==="
          echo "Token length: ${#REPLICATE_API_TOKEN}"
          cog login --token "$REPLICATE_API_TOKEN"
          
      - name: Push to Replicate
        env:
          REPLICATE_API_TOKEN: ${{ secrets.REPLICATE_API_TOKEN }}
        run: |
          echo "=== Attempting push ==="
          cog push r8.im/student0129/whisperx-app-from-github
